{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'INTERSKIPLIST/tests'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\nISL                       = require './main'\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\nhex = ( n ) -> '0x' + n.toString 16\ns   = ( x ) -> JSON.stringify x\n\n#-----------------------------------------------------------------------------------------------------------\nfind_ids_text = ( me, P... ) ->\n  R = ISL._find_ids_with_all_points me, P...\n  R.sort()\n  return R.join ','\n\n# #-----------------------------------------------------------------------------------------------------------\n# find_names_text = ( me, points ) ->\n#   # debug '8322', ISL._find_ids_with_all_points me, points\n#   R = ISL.match_common me, points, pick: 'name'\n#   R.sort()\n#   return R.join ','\n\n#-----------------------------------------------------------------------------------------------------------\nlist = ( me ) ->\n  for entry in ISL.entries_of me\n    [ type, _, ] = ( entry[ 'name' ] ? '???/' ).split ':'\n    help ( CND.grey type + '/' ) + ( CND.steel 'interval' ) + ': ' + ( CND.yellow \"#{hex entry[ 'lo' ]}-#{hex entry[ 'hi' ]}\" )\n    for key, value of entry\n      # continue if key in [ 'lo', 'hi', 'id', ]\n      help ( CND.grey type + '/' ) + ( CND.steel key ) + ': ' + ( CND.yellow value )\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nshow = ( me ) ->\n  echo '                      0         1         2         3         4         5         6         7         8         9         0         1         2         3         4         5         6         7         8         9         '\n  echo '                      01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'\n  # debug '4921', me[ 'min' ], me[ 'max' ]\n  for id, [ lo, hi, ] of me[ '%self' ].intervalsByMarker\n    lo_closed = yes\n    hi_closed = yes\n    # [ lo, hi, ] = [ hi, lo, ] if lo > hi\n    if lo < 0\n      lo        = 0\n      lo_closed = no\n    if hi > 199\n      hi        = 199\n      hi_closed = no\n    id += ' ' while id.length < 20\n    if lo > 199 and hi > 199\n      echo id id + '  ' + ( ' '.repeat 199 ) + '->'\n      continue\n    if lo is hi\n      echo id + '  ' + ( ' '.repeat lo ) + 'H'\n      continue\n    left  = if lo_closed then '[' else '-'\n    right = if hi_closed then ']' else '-'\n    echo id + '  ' + ( ' '.repeat lo ) + left + ( '-'.repeat hi - lo - 1 ) + right\n\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"test interval tree 1\" ] = ( T ) ->\n  #.........................................................................................................\n  isl  = ISL.new()\n  intervals = [\n    [  1,  3, 'A',  ]\n    [  2, 14, 'B',  ]\n    [  3,  7, 'C',  ]\n    [  4,  4, 'D',  ]\n    [  5,  7, 'E',  ]\n    [  8, 12, 'F1', ]\n    [  8, 12, 'F2', ]\n    [  8, 22, 'G',  ]\n    [ 10, 13, 'H',  ]\n    ]\n  #.........................................................................................................\n  for [ lo, hi, id, ] in intervals\n    ISL.add isl, { lo, hi, id, }\n  show isl\n  #.........................................................................................................\n  # search()\n  T.eq ( find_ids_text isl,  0 ), ''\n  T.eq ( find_ids_text isl,  1 ), 'A'\n  T.eq ( find_ids_text isl,  2 ), 'A,B'\n  T.eq ( find_ids_text isl,  3 ), 'A,B,C'\n  T.eq ( find_ids_text isl,  4 ), 'B,C,D'\n  T.eq ( find_ids_text isl,  5 ), 'B,C,E'\n  T.eq ( find_ids_text isl,  6 ), 'B,C,E'\n  T.eq ( find_ids_text isl,  7 ), 'B,C,E'\n  T.eq ( find_ids_text isl,  8 ), 'B,F1,F2,G'\n  T.eq ( find_ids_text isl,  9 ), 'B,F1,F2,G'\n  T.eq ( find_ids_text isl, 10 ), 'B,F1,F2,G,H'\n  T.eq ( find_ids_text isl, 11 ), 'B,F1,F2,G,H'\n  T.eq ( find_ids_text isl, 12 ), 'B,F1,F2,G,H'\n  T.eq ( find_ids_text isl, 13 ), 'B,G,H'\n  T.eq ( find_ids_text isl, 14 ), 'B,G'\n  T.eq ( find_ids_text isl, 15 ), 'G'\n  T.eq ( find_ids_text isl, 16 ), 'G'\n  T.eq ( find_ids_text isl, 17 ), 'G'\n  T.eq ( find_ids_text isl, 18 ), 'G'\n  # ISL.add isl, [ 10, 13, 'FF' ]\n  # delete isl[ '%self' ]\n  # debug '©29478', isl\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"test interval tree 2\" ] = ( T ) ->\n  #.........................................................................................................\n  isl  = ISL.new()\n  intervals = [\n    [   1,  3,  'orion' ]\n    [   2, 14,  'orion' ]\n    [   3,  7,  'orion' ]\n    [   4,  4,  'orion' ]\n    [   5,  7,  'cygnus' ]\n    [   5,  7,  'orion' ]\n    [   8, 12,  'aldebaran' ]\n    [ -12,  8,  'aldebaran' ]\n    [   8, 22,  'aldebaran' ]\n    [  10, 13,  'aldebaran' ]\n    [  11, 15,  'cygnus' ]\n    ]\n  #.........................................................................................................\n  for [ lo, hi, tag, ] in intervals\n    ISL.add isl, { lo, hi, tag, }\n  show isl\n  #.........................................................................................................\n  T.eq ( ISL.match isl,  0, pick: 'tag' ),  [\"aldebaran\"]\n  T.eq ( ISL.match isl,  1, pick: 'tag' ),  [\"orion\",\"aldebaran\"]\n  T.eq ( ISL.match isl,  2, pick: 'tag' ),  [\"orion\",\"aldebaran\"]\n  T.eq ( ISL.match isl,  3, pick: 'tag' ),  [\"orion\",\"aldebaran\"]\n  T.eq ( ISL.match isl,  4, pick: 'tag' ),  [\"orion\",\"aldebaran\"]\n  T.eq ( ISL.match isl,  5, pick: 'tag' ),  [\"cygnus\",\"orion\",\"aldebaran\"]\n  T.eq ( ISL.match isl,  6, pick: 'tag' ),  [\"cygnus\",\"orion\",\"aldebaran\"]\n  T.eq ( ISL.match isl,  7, pick: 'tag' ),  [\"cygnus\",\"orion\",\"aldebaran\"]\n  T.eq ( ISL.match isl,  8, pick: 'tag' ),  [\"orion\",\"aldebaran\"]\n  T.eq ( ISL.match isl,  9, pick: 'tag' ),  [\"orion\",\"aldebaran\"]\n  T.eq ( ISL.match isl, 10, pick: 'tag' ),  [\"orion\",\"aldebaran\"]\n  T.eq ( ISL.match isl, 11, pick: 'tag' ),  [\"orion\",\"aldebaran\",\"cygnus\"]\n  T.eq ( ISL.match isl, 12, pick: 'tag' ),  [\"orion\",\"aldebaran\",\"cygnus\"]\n  T.eq ( ISL.match isl, 13, pick: 'tag' ),  [\"orion\",\"aldebaran\",\"cygnus\"]\n  T.eq ( ISL.match isl, 14, pick: 'tag' ),  [\"orion\",\"aldebaran\",\"cygnus\"]\n  T.eq ( ISL.match isl, 15, pick: 'tag' ),  [\"aldebaran\",\"cygnus\"]\n  T.eq ( ISL.match isl, 16, pick: 'tag' ),  [\"aldebaran\"]\n  T.eq ( ISL.match isl, 17, pick: 'tag' ),  [\"aldebaran\"]\n  T.eq ( ISL.match isl, 18, pick: 'tag' ),  [\"aldebaran\"]\n  #.........................................................................................................\n  # debug JSON.stringify ISL.match isl,  0, pick: 'tag'\n  # debug JSON.stringify ISL.match isl,  1, pick: 'tag'\n  # debug JSON.stringify ISL.match isl,  2, pick: 'tag'\n  # debug JSON.stringify ISL.match isl,  3, pick: 'tag'\n  # debug JSON.stringify ISL.match isl,  4, pick: 'tag'\n  # debug JSON.stringify ISL.match isl,  5, pick: 'tag'\n  # debug JSON.stringify ISL.match isl,  6, pick: 'tag'\n  # debug JSON.stringify ISL.match isl,  7, pick: 'tag'\n  # debug JSON.stringify ISL.match isl,  8, pick: 'tag'\n  # debug JSON.stringify ISL.match isl,  9, pick: 'tag'\n  # debug JSON.stringify ISL.match isl, 10, pick: 'tag'\n  # debug JSON.stringify ISL.match isl, 11, pick: 'tag'\n  # debug JSON.stringify ISL.match isl, 12, pick: 'tag'\n  # debug JSON.stringify ISL.match isl, 13, pick: 'tag'\n  # debug JSON.stringify ISL.match isl, 14, pick: 'tag'\n  # debug JSON.stringify ISL.match isl, 15, pick: 'tag'\n  # debug JSON.stringify ISL.match isl, 16, pick: 'tag'\n  # debug JSON.stringify ISL.match isl, 17, pick: 'tag'\n  # debug JSON.stringify ISL.match isl, 18, pick: 'tag'\n  #.........................................................................................................\n  # delete isl[ '%self' ]\n  # debug '©29478', isl\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"test interval tree 3\" ] = ( T ) ->\n  isl      = ISL.new()\n  intervals = [\n    [ 17, 19, 'plane', 'A', ]\n    [  5,  8, 'plane', 'B', ]\n    [ 21, 24, 'block', 'A', ]\n    [  4,  8, 'block', 'D', ]\n    ]\n  ISL.add isl, { lo, hi, type, name, } for [ lo, hi, type, name, ] in intervals\n  show isl\n  # ISL._decorate isl[ '%self' ][ 'root' ]\n  # search()\n  error_count = 0\n  # error_count += eq ( find_ids_text isl, 0 ), ''\n  # debug rpr find_ids_text isl, [ 23, 25, ] # 'C'\n  # debug rpr find_ids_text isl, [ 12, 14, ] # ''\n  # debug rpr find_ids_text isl, [ 21, 23, ] # 'G,C'\n  # debug rpr find_ids_text isl, [  8,  9, ] # 'B,D,F'\n  # debug rpr find_ids_text isl, [  5,  8, ]\n  # debug rpr find_ids_text isl, [ 21, 24, ]\n  # debug rpr find_ids_text isl, [  4,  8, ]\n  T.eq ( ISL.intersect isl, [ 18, 22, ] ),  [{\"lo\":17,\"hi\":19,\"type\":\"plane\",\"name\":\"A\",\"idx\":0,\"id\":\"A[0]\",\"size\":3},{\"lo\":21,\"hi\":24,\"type\":\"block\",\"name\":\"A\",\"idx\":2,\"id\":\"A[1]\",\"size\":4}]\n  T.eq ( ( entry for entry in ISL.intersect isl, [ 18, 22, ] when entry[ 'type' ] is 'block' ) ),  [{\"lo\":21,\"hi\":24,\"type\":\"block\",\"name\":\"A\",\"idx\":2,\"id\":\"A[1]\",\"size\":4}]\n  T.eq ( ISL.match isl, [ 2, 30, ] ),  []\n  T.eq ( ISL.intersect isl, 18 ),  [{\"lo\":17,\"hi\":19,\"type\":\"plane\",\"name\":\"A\",\"idx\":0,\"id\":\"A[0]\",\"size\":3}]\n  T.eq ( ISL.match isl, 18 ),  [{\"lo\":17,\"hi\":19,\"type\":\"plane\",\"name\":\"A\",\"idx\":0,\"id\":\"A[0]\",\"size\":3}]\n  # debug s ISL.intersect isl, [ 18, 22, ]\n  # debug s ( entry for entry in ISL.intersect isl, [ 18, 22, ] when entry[ 'type' ] is 'block' )\n  # debug s ISL.match isl, [ 2, 30, ]\n  # debug s ISL.intersect isl, 18\n  # debug s ISL.match isl, 18\n  # search()\n  # debug '4430', ISL.get_values isl\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"characters as points 1\" ] = ( T ) ->\n  a_cid = 'a'.codePointAt 0\n  z_cid = 'z'.codePointAt 0\n  #.........................................................................................................\n  isl  = ISL.new()\n  ISL.add isl, { lo: a_cid, hi: z_cid, name: 'Basic Latin:Lower Case', }\n  entry = ( ISL.entries_of isl )[ 0 ]\n  T.eq entry[ 'lo'   ], a_cid\n  T.eq entry[ 'hi'   ], z_cid\n  T.eq isl[ 'min'  ],   a_cid\n  T.eq isl[ 'max'  ],   z_cid\n  T.eq isl[ 'fmin' ],   a_cid\n  T.eq isl[ 'fmax' ],   z_cid\n  #.........................................................................................................\n  isl  = ISL.new()\n  ISL.add isl, { lo: 'a', hi: 'z', name: 'Basic Latin:Lower Case', }\n  entry = ( ISL.entries_of isl )[ 0 ]\n  T.eq entry[ 'lo'   ], a_cid\n  T.eq entry[ 'hi'   ], z_cid\n  T.eq isl[ 'min'  ],   a_cid\n  T.eq isl[ 'max'  ],   z_cid\n  T.eq isl[ 'fmin' ],   a_cid\n  T.eq isl[ 'fmax' ],   z_cid\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_characters as points 3\" ] = ( T ) ->\n  throw new Error \"not implemented\"\n  isl = ISL.new()\n  ISL.add isl, { lo: 0x00, hi: 0x7f, name: 'basic-latin', }\n  ISL.add isl, { lo: 'a', hi: 'z', name: 'letter', }\n  ISL.add isl, { lo: 'A', hi: 'Z', name: 'letter', }\n  ISL.add isl, { lo: 'a', hi: 'z', name: 'lower', }\n  ISL.add isl, { lo: 'A', hi: 'Z', name: 'upper', }\n  #.........................................................................................................\n  for chr in 'aeiouAEIOU'\n    ISL.add isl, { lo: chr, hi: chr, name: 'vowel', }\n  for chr in 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    ISL.add isl, { lo: chr, hi: chr, name: 'consonant', }\n  for chr in '0123456789'\n    ISL.add isl, { lo: chr, hi: chr, name: 'digit', }\n  #.........................................................................................................\n  # debug '4432', find_names_text isl, [ 'c', 'A', ]\n  #.........................................................................................................\n  T.eq ( find_names_text isl, [ 'c'     , ] ), 'basic-latin,consonant,letter,lower'\n  T.eq ( find_names_text isl, [ 'C'     , ] ), 'basic-latin,consonant,letter,upper'\n  T.eq ( find_names_text isl, [ 'c', 'C', ] ), 'basic-latin,consonant,letter'\n  T.eq ( find_names_text isl, [ 'C', 'C', ] ), 'basic-latin,consonant,letter,upper'\n  T.eq ( find_names_text isl, [ 'C', 'A', ] ), 'basic-latin,letter,upper'\n  T.eq ( find_names_text isl, [ 'c', 'A', ] ), 'basic-latin,letter'\n  T.eq ( find_names_text isl, [ 'A', 'e', ] ), 'basic-latin,letter,vowel'\n  T.eq ( find_names_text isl, [ 'i', 'e', ] ), 'basic-latin,letter,lower,vowel'\n  T.eq ( find_names_text isl, [ '2', 'e', ] ), 'basic-latin'\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"intervals_from_points\" ] = ( T ) ->\n  isl = ISL.new()\n  # debug ISL.intervals_from_points isl, Array.from 'abcefg'\n  T.eq ( ISL.intervals_from_points isl, [ 3, 4, 5, ] ), [ { lo: 3, hi: 5, }, ]\n  T.eq ( ISL.intervals_from_points isl, [ 3, 4, 5, 7, 8, 9, 10 ] ), [ { lo: 3, hi: 5, }, { lo: 7, hi: 10, }, ]\n  T.eq ( ISL.intervals_from_points isl, [ 7, 10 ] ), [ { lo: 7, hi: 7, }, { lo: 10, hi: 10, }, ]\n  A_cid = 'A'.codePointAt 0\n  B_cid = 'B'.codePointAt 0\n  C_cid = 'C'.codePointAt 0\n  X_cid = 'X'.codePointAt 0\n  Y_cid = 'Y'.codePointAt 0\n  Z_cid = 'Z'.codePointAt 0\n  T.eq ( ISL.intervals_from_points isl, Array.from 'CBABAXZY' ), [ { lo: A_cid, hi: C_cid, }, { lo: X_cid, hi: Z_cid, }, ]\n  T.eq ( ISL.intervals_from_points isl, ( Array.from 'CBABAXZY' ), { name: 'foo', } ), [ { lo: A_cid, hi: C_cid, name: 'foo', }, { lo: X_cid, hi: Z_cid, name: 'foo', }, ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"intervals without ID, name\" ] = ( T ) ->\n  isl = ISL.new()\n  ISL.add isl, { lo: 'a', 'hi': 'z', }\n  ISL.add isl, { lo: 'a', 'hi': 'k', id:   'lower-half' }\n  ISL.add isl, { lo: 'l', 'hi': 'z', name: 'upper-half' }\n  # debug JSON.stringify ISL.intersect isl, [ 'c', 'm', ]\n  T.eq ( ISL.intersect isl, [ 'c', 'm', ] ), [\n    {\"lo\":97,\"hi\":122,\"idx\":0,\"id\":\"+[0]\",\"name\":\"+\",\"size\":26},\n    {\"lo\":97,\"hi\":107,\"id\":\"lower-half\",\"idx\":1,\"name\":\"+\",\"size\":11},\n    {\"lo\":108,\"hi\":122,\"name\":\"upper-half\",\"idx\":2,\"id\":\"upper-half[0]\",\"size\":15}\n  ]\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"aggregation 1\" ] = ( T ) ->\n  ###\n  《 0x300a\n  ###\n  entries = [\n    #.......................................................................................................\n    {\n      lo:         0x0\n      hi:         0x10ffff\n      type:       'style'\n      name:       'fallback'\n      tex:        'mktsRsgFb' }\n    #.......................................................................................................\n    {\n      lo:         0x0\n      hi:         0xffff\n      type:       'plane'\n      name:       'Basic Multilingual Plane (BMP)' }\n    #.......................................................................................................\n    {\n      lo:         0x2e80\n      hi:         0x33ff\n      type:       'area'\n      name:       'CJK Miscellaneous Area' }\n    #.......................................................................................................\n    {\n      lo:         0x3000\n      hi:         0x303f\n      type:       'block'\n      name:       'CJK Symbols and Punctuation'\n      rsg:        'u-cjk-sym'\n      is_cjk:     true\n      tex:        'cnsymOld' }\n    #.......................................................................................................\n    {\n      lo:         0x3000\n      hi:         0x303f\n      type:       'block'\n      name:       'CJK Symbols and Punctuation'\n      rsg:        'u-cjk-sym'\n      is_cjk:     true\n      tex:        'cnsymNew' }\n    #.......................................................................................................\n    {\n      lo:         0x300a\n      hi:         0x300a\n      type:       'style'\n      name:       'glyph-0x300a'\n      rsg:        'u-cjk-sym'\n      style:      { raise: -0.2 } }\n    #.......................................................................................................\n    ]\n  #.........................................................................................................\n  isl = ISL.new()\n  ISL.add isl, entry for entry in entries\n  #.........................................................................................................\n  replacers =\n    fields:\n      type:   'list'\n      style:  'list'\n      tex:    'list'\n      rsg:    'assign'\n      name:   'assign'\n  #.........................................................................................................\n  description = ISL.aggregate isl, ( '《'.codePointAt 0 ), replacers\n  # debug JSON.stringify description\n  help description\n  T.eq description, {\n    type: [ 'style', 'plane', 'area', 'block', 'block', 'style' ],\n    name: 'glyph-0x300a',\n    tex: [ 'mktsRsgFb', 'cnsymOld', 'cnsymNew' ],\n    rsg: 'u-cjk-sym',\n    is_cjk: true,\n    style: [ { raise: -0.2 } ] }\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"aggregation 2\" ] = ( T ) ->\n  isl = ISL.new()\n  ISL.add isl, { lo: 0, hi: 10, id: 'wide',   count: 10, length: 10, foo: 'D',  }\n  ISL.add isl, { lo: 3, hi:  7, id: 'narrow', count:  4, length:  4, foo: 'UH', }\n  reducers =\n    fallback: 'list'\n    fields:\n      id:     'list'\n      lo:     'assign'\n      hi:     'assign'\n      name:   'assign'\n      count:  'add'\n      length: 'average'\n      foo:    ( values ) ->\n        return ( ( value.toLowerCase() for value in values ). join '' ) + '!'\n  debug JSON.stringify ISL.aggregate isl, 5, reducers\n  T.eq ( ISL.aggregate isl, 5, reducers ), {\"lo\":3,\"hi\":7,\"id\":[\"wide\",\"narrow\"],\"count\":14,\"name\":\"+\",\"length\":7,\"foo\":\"duh!\"}\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"readme example 1\" ] = ( T ) ->\n  isl = ISL.new()\n  ISL.add isl, { lo: 0x00, hi: 0x7f, name: 'basic-latin', }\n  ISL.add isl, { lo: 'a', hi: 'z', name: 'letter', }\n  ISL.add isl, { lo: 'A', hi: 'Z', name: 'letter', }\n  ISL.add isl, { lo: 'a', hi: 'z', name: 'lower', }\n  ISL.add isl, { lo: 'A', hi: 'Z', name: 'upper', }\n  #.........................................................................................................\n  for chr in 'aeiouAEIOU'\n    ISL.add isl, { lo: chr, hi: chr, name: 'vowel', }\n  consonants = Array.from 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n  for interval in ISL.intervals_from_points isl, consonants, { name: 'consonant', }\n    ISL.add isl, interval\n  digits = Array.from '0123456789'\n  for interval in ISL.intervals_from_points isl, digits, { name: 'digit', }\n    ISL.add isl, interval\n  #.........................................................................................................\n  show isl\n  #.........................................................................................................\n  # console.log ISL.find_names_with_all_points isl, [ 'c'     , ]\n  # console.log ISL.find_names_with_all_points isl, [ 'C'     , ]\n  # console.log ISL.find_names_with_all_points isl, [ 'c', 'C', ]\n  # console.log ISL.find_names_with_all_points isl, [ 'C', 'C', ]\n  # console.log ISL.find_names_with_all_points isl, [ 'C', 'A', ]\n  # console.log ISL.find_names_with_all_points isl, [ 'c', 'A', ]\n  # console.log ISL.find_names_with_all_points isl, [ 'A', 'e', ]\n  # console.log ISL.find_names_with_all_points isl, [ 'i', 'e', ]\n  # console.log ISL.find_names_with_all_points isl, [ '2', 'e', ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"readme example 2\" ] = ( T ) ->\n  samples = ISL.new()\n  ISL.add samples, { lo: 0x0000, hi: 0x10ffff, name: 'base',      font_family: 'Arial',        }\n  ISL.add samples, { lo:   0x00, hi:     0xff, name: 'ascii',     font_family: 'Arial',        }\n  ISL.add samples, { lo: 0x4e00, hi:   0x9fff, name: 'cjk',       font_family: 'Sun-ExtA',     }\n  ISL.add samples, { lo: 0x3040, hi:   0x309f, name: 'cjk',       font_family: 'Sun-ExtA',     }\n  ISL.add samples, { lo:   0x26, hi:     0x26, name: 'ampersand', font_family: 'Baskerville',  }\n  # debug 'rx2-1', 'A', ISL.find_names_with_all_points samples, 'A' # --> [ 'latin' ]\n  # debug 'rx2-2', '&', ISL.find_names_with_all_points samples, '&' # --> [ 'latin', 'ampersand' ]\n  # debug 'rx2-3', '人', ISL.find_names_with_all_points samples, '人' # --> [ 'latin', 'cjk' ]\n  # debug 'rx2-3', 'Abcd人', ISL.find_names_with_all_points samples, Array.from 'Abcd人' # --> [ 'latin', 'cjk' ]\n  # debug 'rx2-3', '人はるのそらのした', ISL.find_names_with_all_points samples, Array.from '人はるのそらのした' # --> [ 'latin', 'cjk' ]\n  # T.eq ( ISL.find_names_with_all_points     samples, 'A' ), ( ISL.find_names     samples, 'A' )\n  # T.eq ( ISL.find_names_with_all_points     samples, '&' ), ( ISL.find_names     samples, '&' )\n  # T.eq ( ISL.find_names_with_all_points     samples, '人' ), ( ISL.find_names     samples, '人' )\n  T.eq ( ISL._find_ids_with_all_points       samples, 'A' ), ( ISL.match       samples, 'A', pick: 'id' )\n  T.eq ( ISL._find_ids_with_all_points       samples, '&' ), ( ISL.match       samples, '&', pick: 'id' )\n  T.eq ( ISL._find_ids_with_all_points       samples, '人' ), ( ISL.match       samples, '人', pick: 'id' )\n  # T.eq ( ISL.find_intervals_with_all_points samples, 'A' ), ( ISL.find_intervals samples, 'A' )\n  # T.eq ( ISL.find_intervals_with_all_points samples, '&' ), ( ISL.find_intervals samples, '&' )\n  # T.eq ( ISL.find_intervals_with_all_points samples, '人' ), ( ISL.find_intervals samples, '人' )\n  T.eq ( ISL.intersect samples, 'A' ), ( ISL.match samples, 'A' )\n  T.eq ( ISL.intersect samples, '&' ), ( ISL.match samples, '&' )\n  T.eq ( ISL.intersect samples, '人' ), ( ISL.match samples, '人' )\n  urge 'rx2-7', 'A', ISL.aggregate samples, 'A' #, { font_family: 'list', }\n  urge 'rx2-8', '&', ISL.aggregate samples, '&' #, { font_family: 'list', }\n  urge 'rx2-9', '人', ISL.aggregate samples, '人' #, { font_family: 'list', }\n  replacers = { fallback: 'list', name: 'list', }\n  info 'rx2-10', 'A', ISL.aggregate samples, 'A', replacers\n  info 'rx2-11', '&', ISL.aggregate samples, '&', replacers\n  info 'rx2-12', '人', ISL.aggregate samples, '人', replacers\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"demo discontiguous ranges\" ] = ( T ) ->\n  u = ISL.new()\n  ISL.add u, { lo:  0x4e00,  hi:  0x9fff,  name: 'cjk', id: 'u-cjk',         }\n  ISL.add u, { lo:  0xff00,  hi:  0xffef,  name: 'cjk', id: 'u-halfull',     }\n  ISL.add u, { lo:  0x3400,  hi:  0x4dbf,  name: 'cjk', id: 'u-cjk-xa',      }\n  ISL.add u, { lo: 0x20000,  hi: 0x2a6df,  name: 'cjk', id: 'u-cjk-xb',      }\n  ISL.add u, { lo: 0x2a700,  hi: 0x2b73f,  name: 'cjk', id: 'u-cjk-xc',      }\n  ISL.add u, { lo: 0x2b740,  hi: 0x2b81f,  name: 'cjk', id: 'u-cjk-xd',      }\n  ISL.add u, { lo: 0x2b820,  hi: 0x2ceaf,  name: 'cjk', id: 'u-cjk-xe',      }\n  ISL.add u, { lo:  0xf900,  hi:  0xfaff,  name: 'cjk', id: 'u-cjk-cmpi1',   }\n  ISL.add u, { lo: 0x2f800,  hi: 0x2fa1f,  name: 'cjk', id: 'u-cjk-cmpi2',   }\n  ISL.add u, { lo:  0x2f00,  hi:  0x2fdf,  name: 'cjk', id: 'u-cjk-rad1',    }\n  ISL.add u, { lo:  0x2e80,  hi:  0x2eff,  name: 'cjk', id: 'u-cjk-rad2',    }\n  ISL.add u, { lo:  0x3000,  hi:  0x303f,  name: 'cjk', id: 'u-cjk-sym',     }\n  ISL.add u, { lo:  0x31c0,  hi:  0x31ef,  name: 'cjk', id: 'u-cjk-strk',    }\n  ISL.add u, { lo:  0x30a0,  hi:  0x30ff,  name: 'cjk', id: 'u-cjk-kata',    }\n  ISL.add u, { lo:  0x3040,  hi:  0x309f,  name: 'cjk', id: 'u-cjk-hira',    }\n  ISL.add u, { lo:  0xac00,  hi:  0xd7af,  name: 'cjk', id: 'u-hang-syl',    }\n  ISL.add u, { lo:  0x3200,  hi:  0x32ff,  name: 'cjk', id: 'u-cjk-enclett', }\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"unique names with priority conflict\" ] = ( T ) ->\n  isl = ISL.new()\n  ISL.add isl, { lo: 15, hi: 20, id: 'alpha-0',  name: 'alpha',  }\n  ISL.add isl, { lo: 15, hi: 25, id: 'beta-0',   name: 'beta',   }\n  ISL.add isl, { lo: 15, hi: 25, id: 'omega-0',  name: 'omega',  }\n  ISL.add isl, { lo: 15, hi: 49, id: 'gamma-0',  name: 'gamma',  }\n  ISL.add isl, { lo: 15, hi: 29, id: 'beta-1',   name: 'beta',   }\n  show isl\n  # debug '3928', JSON.stringify ISL.match   isl, 15, pick: 'id'\n  # debug '3928', JSON.stringify ISL.find_names isl, 15\n  # urge '3928', JSON.stringify ISL.find_names_with_all_points isl, [ 15, 16, 30, ]\n  # urge '3928', JSON.stringify ISL.find_names_with_any_points isl, [ 15, 16, 30, ]\n  T.eq ( ISL.match isl, 15, pick: 'id'   ), [\"alpha-0\",\"beta-0\",\"omega-0\",\"gamma-0\",\"beta-1\"]\n  T.eq ( ISL.match isl, 15, pick: 'name' ), [\"alpha\",\"omega\",\"gamma\",\"beta\"]\n  # T.eq ( ISL.match_common isl, [ 15, 16, 30, ], pick: 'name' ), [\"gamma\"]\n  # T.eq ( ISL.match_common isl, [ 15, 16, 30, ], pick: 'name' ), [\"alpha\",\"omega\",\"beta\",\"gamma\"]\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"tag 1\" ] = ( T ) ->\n  u = ISL.new()\n  #.........................................................................................................\n  ISL.add u, { lo: 0x00, hi: 0x7f, name: 'ascii', }\n  for n in [ 0 .. 8 ] by +2\n    digit_0 = \"#{n}\"\n    digit_1 = \"#{n + 1}\"\n    ISL.add u, { lo: digit_0, hi: digit_0, tag: [ 'ascii', 'digit', 'even', ], }\n    ISL.add u, { lo: digit_1, hi: digit_1, tag: [ 'ascii', 'digit', 'odd',  ], }\n  ISL.add u, { lo: '2', hi: '2', tag: [ 'prime', ], }\n  ISL.add u, { lo: '3', hi: '3', tag: [ 'prime', ], }\n  ISL.add u, { lo: '5', hi: '5', tag: [ 'prime', ], }\n  ISL.add u, { lo: '7', hi: '7', tag: [ 'prime', ], }\n  #.........................................................................................................\n  for n in [ 0 .. 9 ]\n    digit = \"#{n}\"\n    help digit, ISL.aggregate u, digit, {\n      fallback:    'skip',\n      tag:   'tag',\n      }\n  #.........................................................................................................\n  T.eq ( ISL.aggregate u, '3', { fallback: 'skip', tag: 'tag', } ), { tag: [ 'ascii', 'digit', 'odd', 'prime', ], }\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"tag 2\" ] = ( T ) ->\n  u = ISL.new()\n  #.........................................................................................................\n  ISL.add u, { lo: 0x00, hi: 0x7f, name: 'ascii', }\n  for n in [ 0 .. 8 ] by +2\n    digit_0 = \"#{n}\"\n    digit_1 = \"#{n + 1}\"\n    ISL.add u, { lo: digit_0, hi: digit_0, tag: [ 'ascii', 'digit', 'even', ], }\n    ISL.add u, { lo: digit_1, hi: digit_1, tag: [ 'ascii', 'digit', 'odd',  ], }\n  ISL.add u, { lo: '2', hi: '2', tag: 'prime', }\n  ISL.add u, { lo: '3', hi: '3', tag: 'prime', }\n  ISL.add u, { lo: '5', hi: '5', tag: 'prime', }\n  ISL.add u, { lo: '7', hi: '7', tag: 'prime', }\n  #.........................................................................................................\n  T.eq ( ISL.aggregate u, '3' ), { tag: [ 'ascii', 'digit', 'odd', 'prime', ], }\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"tag 2a\" ] = ( T ) ->\n  probes_and_matchers = [\n    [ '0', { tag: [ 'digit', 'even' ] }, ]\n    [ '1', { tag: [ 'digit', 'odd'  ] }, ]\n    [ '2', { tag: [ 'digit', 'even' ] }, ]\n    [ '3', { tag: [ 'digit', 'odd'  ] }, ]\n    [ '4', { tag: [ 'digit', 'even' ] }, ]\n    [ '5', { tag: [ 'digit', 'odd'  ] }, ]\n    [ '6', { tag: [ 'digit', 'even' ] }, ]\n    [ '7', { tag: [ 'digit', 'odd'  ] }, ]\n    [ '8', { tag: [ 'digit', 'even' ] }, ]\n    [ '9', { tag: [ 'digit', 'odd'  ] }, ]\n    ]\n  #.........................................................................................................\n  u = ISL.new()\n  #.........................................................................................................\n  ISL.add u, { lo: 0x00, hi: 0x7f, name: 'ascii', }\n  ISL.add u, { lo: '0', hi: '9', tag: [ 'digit', 'even', ], }\n  for n in [ 1 .. 9 ] by +2\n    digit_0 = \"#{n}\"\n    ISL.add u, { lo: digit_0, hi: digit_0, tag: [ '-even', 'odd', ], }\n  #.........................................................................................................\n  for [ probe, matcher, ] in probes_and_matchers\n    result = ISL.aggregate u, probe, { name: 'skip', }\n    # debug '0141', [ probe, result, ]\n    T.eq result, matcher\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"tag 2b\" ] = ( T ) ->\n  probes_and_matchers = [\n    [ '0', { tag: [ 'digit', 'even' ] }, ]\n    [ '1', { tag: [ 'digit', 'odd'  ] }, ]\n    [ '2', { tag: [ 'digit', 'even' ] }, ]\n    [ '3', { tag: [ 'digit', 'odd'  ] }, ]\n    [ '4', { tag: [ 'digit', 'even' ] }, ]\n    [ '5', { tag: [ 'digit', 'odd'  ] }, ]\n    [ '6', { tag: [ 'digit', 'even' ] }, ]\n    [ '7', { tag: [ 'digit', 'odd'  ] }, ]\n    [ '8', { tag: [ 'digit', 'even' ] }, ]\n    [ '9', { tag: [ 'digit', 'odd'  ] }, ]\n    ]\n  #.........................................................................................................\n  u = ISL.new()\n  #.........................................................................................................\n  ISL.add u, { lo: 0x00, hi: 0x7f, name: 'ascii', }\n  ISL.add u, { lo: '0', hi: '9', tag: 'digit even', }\n  for n in [ 1 .. 9 ] by +2\n    digit_0 = \"#{n}\"\n    ISL.add u, { lo: digit_0, hi: digit_0, tag: '-even odd', }\n  #.........................................................................................................\n  for [ probe, matcher, ] in probes_and_matchers\n    result = ISL.aggregate u, probe, { name: 'skip', }\n    # debug '0141', [ probe, result, ]\n    T.eq result, matcher\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"tag 3\" ] = ( T ) ->\n  u = ISL.new()\n  #.........................................................................................................\n  ISL.add u, { lo: 0x00, hi: 0x7f, tag:  'ascii', }\n  ISL.add u, { lo: 0x00, hi: 0x7f, name: 'ascii-duplicate', }\n  for n in [ 0 .. 8 ] by +2\n    digit_0 = \"#{n}\"\n    digit_1 = \"#{n + 1}\"\n    ISL.add u, { lo: digit_0, hi: digit_0, tag: [ 'ascii', 'digit', 'even', ], }\n    ISL.add u, { lo: digit_1, hi: digit_1, tag: [ 'ascii', 'digit', 'odd',  ], }\n  ISL.add u, { lo: '2', hi: '2', tag: 'prime', }\n  ISL.add u, { lo: '3', hi: '3', tag: 'prime', }\n  ISL.add u, { lo: '5', hi: '5', tag: 'prime', }\n  ISL.add u, { lo: '7', hi: '7', tag: 'prime', }\n  #.........................................................................................................\n  T.eq ( ISL.aggregate u, '3' ), { tag: [ 'ascii', 'digit', 'odd', 'prime', ], }\n  # debug '5531-6', s ISL.find_tags_with_all_points u, [ '3', '7', '2', ]\n  # debug '5531-7', s ISL.find_tags_with_any_points u, [ '3', '7', '2', ]\n  # T.eq ( ISL.find_tags u, '3' ), [\"ascii\",\"digit\",\"odd\",\"prime\"]\n  # T.eq ( ISL.find_tags_with_all_points u, [ '3', '7', '2', ] ), [\"ascii\",\"digit\",\"prime\"]\n  # T.eq ( ISL.find_tags_with_any_points u, [ '3', '7', '2', ] ), [\"even\",\"ascii\",\"digit\",\"odd\",\"prime\"]\n  #.........................................................................................................\n  info u\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"negative tags\" ] = ( T ) ->\n  #.........................................................................................................\n  add = ( isl, description ) ->\n    rsg = null\n    tag = null\n    [ type, tail..., ] = description\n    #.......................................................................................................\n    switch type\n      when 'block'                then [ name, rsg, lo, hi, tag, ] = tail\n      when 'plane', 'area'        then [ name,      lo, hi, tag, ] = tail\n      when 'codepoints'           then [            lo, hi, tag, ] = tail\n      else throw new Error \"unknown entry type #{rpr type}\"\n    #.......................................................................................................\n    interval            = { lo, hi, }\n    interval[ type    ] = name                if name?\n    interval[ 'rsg'   ] = rsg                 if rsg?\n    interval[ 'tag'   ] = tag.split /[\\s,]+/  if tag?\n    ISL.add isl, interval\n    #.......................................................................................................\n    return null\n  #.........................................................................................................\n  descriptions = [\n    #.......................................................................................................\n    # Planes\n    [ 'plane', 'Basic Multilingual Plane (BMP)',                               0x0000,    0xffff,  ]\n    [ 'plane', 'Supplementary Multilingual Plane (SMP)',                      0x10000,   0x1ffff,  ]\n    [ 'plane', 'Supplementary Ideographic Plane (SIP)',                       0x20000,   0x2ffff,  ]\n    #.......................................................................................................\n    # Areas\n    [ 'area', 'ASCII & Latin-1 Compatibility Area',                           0x0000,     0x00ff,  ]\n    [ 'area', 'General Scripts Area',                                         0x0100,     0x058f,  ]\n    #.......................................................................................................\n    # Blocks\n    [ 'block', 'Basic Latin',                             'u-latn',               0x0,      0x7f,  ]\n    [ 'block', 'Latin-1 Supplement',                      'u-latn-1',            0x80,      0xff,  ]\n    [ 'block', 'Latin Extended-A',                        'u-latn-a',           0x100,     0x17f,  ]\n    [ 'block', 'Latin Extended-B',                        'u-latn-b',           0x180,     0x24f,  ]\n    [ 'block', 'IPA Extensions',                          'u-ipa-x',            0x250,     0x2af,  ]\n    [ 'block', 'Armenian',                                null,                 0x530,     0x58f,  ]\n    #.......................................................................................................\n    [ 'block', 'CJK Unified Ideographs',                  'u-cjk',             0x4e00,    0x9fff, 'cjk ideograph', ]\n    #.......................................................................................................\n    [ 'block', 'CJK Unified Ideographs Extension A',      'u-cjk-xa',          0x3400,    0x4dbf, 'cjk ideograph', ]\n    [ 'block', 'CJK Unified Ideographs Extension B',      'u-cjk-xb',         0x20000,   0x2a6df, 'cjk ideograph', ]\n    [ 'block', 'CJK Unified Ideographs Extension C',      'u-cjk-xc',         0x2a700,   0x2b73f, 'cjk ideograph', ]\n    [ 'block', 'CJK Unified Ideographs Extension D',      'u-cjk-xd',         0x2b740,   0x2b81f, 'cjk ideograph', ]\n    [ 'block', 'CJK Unified Ideographs Extension E',      'u-cjk-xe',         0x2b820,   0x2ceaf, 'cjk ideograph', ]\n    [ 'block', 'CJK Unified Ideographs Extension F',      'u-cjk-xf',         0x2ceb0,   0x2ebef, 'cjk ideograph', ]\n    #.......................................................................................................\n    [ 'block', 'Ideographic Description Characters',      'u-cjk-idc',         0x2ff0,    0x2fff, 'cjk idl', ]\n    [ 'block', 'CJK Symbols and Punctuation',             'u-cjk-sym',         0x3000,    0x303f, 'cjk punctuation', ]\n    [ 'block', 'CJK Strokes',                             'u-cjk-strk',        0x31c0,    0x31ef, 'cjk stroke', ]\n    [ 'block', 'Enclosed CJK Letters and Months',         'u-cjk-enclett',     0x3200,    0x32ff, 'cjk', ]\n    #.......................................................................................................\n    [ 'block', 'Kangxi Radicals',                         'u-cjk-rad1',        0x2f00,    0x2fdf, 'cjk ideograph kxr', ]\n    [ 'block', 'CJK Radicals Supplement',                 'u-cjk-rad2',        0x2e80,    0x2eff, 'cjk ideograph', ]\n    #.......................................................................................................\n    [ 'block', 'Hiragana',                                'u-cjk-hira',        0x3040,    0x309f, 'cjk japanese kana hiragana', ]\n    [ 'block', 'Katakana',                                'u-cjk-kata',        0x30a0,    0x30ff, 'cjk japanese kana katakana', ]\n    [ 'block', 'Kanbun',                                  'u-cjk-kanbun',      0x3190,    0x319f, 'cjk japanese kanbun', ]\n    [ 'block', 'Katakana Phonetic Extensions',            'u-cjk-kata-x',      0x31f0,    0x31ff, 'cjk japanese kana katakana', ]\n    #.......................................................................................................\n    [ 'block', 'Hangul Jamo',                             'u-hang-jm',         0x1100,    0x11ff, 'cjk korean hangeul jamo', ]\n    [ 'block', 'Hangul Syllables',                        'u-hang-syl',        0xac00,    0xd7af, 'cjk korean hangeul syllable', ]\n    [ 'block', 'Hangul Jamo Extended-A',                  null,                0xa960,    0xa97f, 'cjk korean hangeul jamo', ]\n    [ 'block', 'Hangul Jamo Extended-B',                  null,                0xd7b0,    0xd7ff, 'cjk korean hangeul jamo', ]\n    #.......................................................................................................\n    [ 'block', 'Bopomofo',                                'u-bopo',            0x3100,    0x312f, 'cjk bopomofo', ]\n    [ 'block', 'Bopomofo Extended',                       'u-bopo-x',          0x31a0,    0x31bf, 'cjk bopomofo', ]\n    [ 'block', 'CJK Compatibility Forms',                 'u-cjk-cmpf',        0xfe30,    0xfe4f, 'cjk vertical', ]\n    #.......................................................................................................\n    [ 'codepoints',                                                            0xfe45,    0xfe46, '-vertical', ]\n    [ 'codepoints',                                                            0xfe49,    0xfe4f, '-vertical', ]\n    [ 'block', 'Vertical Forms',                          'u-vertf',           0xfe10,    0xfe1f, 'cjk vertical', ]\n    #.......................................................................................................\n    [ 'block', 'Miscellaneous Symbols',                   'u-sym',             0x2600,    0x26ff, ]\n    [ 'codepoints',                                                            0x262f,    0x2637, 'cjk' ]\n    [ 'codepoints',                                                            0x2630,    0x2637, 'cjk yijing trigram' ]\n    [ 'block', 'Yijing Hexagram Symbols',                 'u-yijng',           0x4dc0,    0x4dff, 'cjk yijing hexagram', ]\n    [ 'block', 'Tai Xuan Jing Symbols',                   'u-txj-sym',        0x1d300,   0x1d35f, 'cjk yijing taixuanjing tetragram', ]\n    [ 'codepoints',                                                           0x1d357,   0x1d35f, '-* reserved', ]\n    #.......................................................................................................\n    [ 'block', 'CJK Compatibility Ideographs',            'u-cjk-cmpi1',       0xf900,    0xfaff, 'cjk', ]\n    [ 'block', 'Hangul Compatibility Jamo',               'u-hang-comp-jm',    0x3130,    0x318f, 'cjk', ]\n    [ 'block', 'CJK Compatibility',                       'u-cjk-cmp',         0x3300,    0x33ff, 'cjk', ]\n    [ 'block', 'CJK Compatibility Ideographs Supplement', 'u-cjk-cmpi2',      0x2f800,   0x2fa1f, 'cjk', ]\n    #.......................................................................................................\n    [ 'block', 'Private Use Area',                        'u-pua',             0xe000,    0xf8ff,  ]\n    ]\n  #.........................................................................................................\n  probes_and_matchers = [\n    [\"a\",{\"plane\":\"Basic Multilingual Plane (BMP)\",\"area\":\"ASCII & Latin-1 Compatibility Area\",\"block\":\"Basic Latin\",\"rsg\":\"u-latn\"}]\n    [\"ä\",{\"plane\":\"Basic Multilingual Plane (BMP)\",\"area\":\"ASCII & Latin-1 Compatibility Area\",\"block\":\"Latin-1 Supplement\",\"rsg\":\"u-latn-1\"}]\n    [\"ɐ\",{\"plane\":\"Basic Multilingual Plane (BMP)\",\"area\":\"General Scripts Area\",\"block\":\"IPA Extensions\",\"rsg\":\"u-ipa-x\"}]\n    [\"ա\",{\"plane\":\"Basic Multilingual Plane (BMP)\",\"area\":\"General Scripts Area\",\"block\":\"Armenian\"}]\n    [\"三\",{\"plane\":\"Basic Multilingual Plane (BMP)\",\"block\":\"CJK Unified Ideographs\",\"rsg\":\"u-cjk\",\"tag\":[\"cjk\",\"ideograph\"]}]\n    [\"ゆ\",{\"plane\":\"Basic Multilingual Plane (BMP)\",\"block\":\"Hiragana\",\"rsg\":\"u-cjk-hira\",\"tag\":[\"cjk\",\"japanese\",\"kana\",\"hiragana\"]}]\n    [\"㈪\",{\"plane\":\"Basic Multilingual Plane (BMP)\",\"block\":\"Enclosed CJK Letters and Months\",\"rsg\":\"u-cjk-enclett\",\"tag\":[\"cjk\"]}]\n    [\"《\",{\"plane\":\"Basic Multilingual Plane (BMP)\",\"block\":\"CJK Symbols and Punctuation\",\"rsg\":\"u-cjk-sym\",\"tag\":[\"cjk\",\"punctuation\"]}]\n    [\"》\",{\"plane\":\"Basic Multilingual Plane (BMP)\",\"block\":\"CJK Symbols and Punctuation\",\"rsg\":\"u-cjk-sym\",\"tag\":[\"cjk\",\"punctuation\"]}]\n    [\"𫠠\",{\"plane\":\"Supplementary Ideographic Plane (SIP)\",\"block\":\"CJK Unified Ideographs Extension E\",\"rsg\":\"u-cjk-xe\",\"tag\":[\"cjk\",\"ideograph\"]}]\n    [\"﹄\",{\"plane\":\"Basic Multilingual Plane (BMP)\",\"block\":\"CJK Compatibility Forms\",\"rsg\":\"u-cjk-cmpf\",\"tag\":[\"cjk\",\"vertical\"]}]\n    [\"﹅\",{\"plane\":\"Basic Multilingual Plane (BMP)\",\"block\":\"CJK Compatibility Forms\",\"rsg\":\"u-cjk-cmpf\",\"tag\":[\"cjk\"]}]\n    [\"𝍖\",{\"plane\":\"Supplementary Multilingual Plane (SMP)\",\"block\":\"Tai Xuan Jing Symbols\",\"rsg\":\"u-txj-sym\",\"tag\":[\"cjk\",\"yijing\",\"taixuanjing\",\"tetragram\"]}]\n    [ ( String.fromCodePoint 0x1d357 ),{\"plane\":\"Supplementary Multilingual Plane (SMP)\",\"block\":\"Tai Xuan Jing Symbols\",\"rsg\":\"u-txj-sym\",\"tag\":[\"reserved\"]}]\n    ]\n  #.........................................................................................................\n  tag_reducer = ( ids_and_tags ) ->\n  u = ISL.new()\n  for description in descriptions\n    add u, description\n  #.........................................................................................................\n  for [ probe, matcher, ] in probes_and_matchers\n    help s [ probe, ISL.aggregate u, probe ]\n    T.eq ( ISL.aggregate u, probe ), matcher\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_complements\" ] = ( T ) ->\n  ###\n      0                   1                   2                   3                   4\n  -∞  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 +∞\n\n  =============================================================================================\n  ---------------------10]                   [20---------------30]                   [40-------\n                               [13---17]\n  ---------------------10]                   [20---------------30]                   [40-------\n\n  =============================================================================================\n  ---------------------10]                   [20---------------30]                   [40-------\n           [3-----7]\n  --------3]       [7--10]                   [20---------------30]                   [40-------\n\n  =============================================================================================\n  ---------------------10]                   [20---------------30]                   [40-------\n                   [7--------13]\n  ----------------7]                         [20---------------30]                   [40-------\n\n  =============================================================================================\n  ---------------------10]                   [20---------------30]                   [40-------\n                                       [17-------23]\n  ---------------------10]                         [23---------30]                   [40-------\n\n  =============================================================================================\n  ---------------------10]                   [20---------------30]                   [40-------\n                                       [17---------------------------33]\n  ---------------------10]                                                           [40-------\n\n  =============================================================================================\n  ---------------------10]                   [20---------------30]                   [40-------\n                   [7----------------------------23]\n  ----------------7]                               [23---------30]                   [40-------\n\n  =============================================================================================\n  ---------------------10]                   [20---------------30]                   [40-------\n                   [7--------------------------------------------------------------------43]\n  ----------------7]                                                                       [43-\n\n  ###\n  #.........................................................................................................\n  f = ->\n    @complement_from_intervals = ( me, intervals ) ->\n      R     = []\n      base  = { lo: Number.MIN_VALUE, hi: Number.MAX_VALUE, }\n      isl   = @new()\n      ISL.add isl, base\n      if intervals.length is 0\n        R.push base\n      else\n        for interval in intervals\n          null\n      return R\n  #.........................................................................................................\n  f.apply ISL\n  #.........................................................................................................\n  cleanup = ( intervals ) ->\n    for interval in intervals\n      delete interval[ 'id'     ]\n      delete interval[ 'name'   ]\n      delete interval[ 'idx'    ]\n      delete interval[ 'size'   ]\n    return intervals\n  #.........................................................................................................\n  probe   = []\n  result  = cleanup ISL.complement_from_intervals null, probe\n  T.eq result, [ { lo: Number.MIN_VALUE, hi: Number.MAX_VALUE, }, ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"infinity is a valid number\" ] = ( T ) ->\n  r = ISL.new()\n  ISL.add r, lo: -Infinity, hi: +Infinity, tag: 'all'\n  ISL.add r, lo:      -1e6, hi:      +1e6, tag: 'finite'\n  ISL.add r, lo:      -1e5, hi:      +1e5, tag: 'truly-huge'\n  ISL.add r, lo:      -1e4, hi:      +1e4, tag: 'huge'\n  ISL.add r, lo:      -1e3, hi:      +1e3, tag: 'big'\n  ISL.add r, lo:      -1e2, hi:      +1e2, tag: 'sizable'\n  ISL.add r, lo:      -1e1, hi:      +1e1, tag: 'small'\n  ISL.add r, lo:      -1e0, hi:      +1e0, tag: 'tiny'\n  # debug s ( ISL.aggregate r,        1, { name: 'skip', } )\n  # debug s ( ISL.aggregate r,       10, { name: 'skip', } )\n  # debug s ( ISL.aggregate r,      100, { name: 'skip', } )\n  # debug s ( ISL.aggregate r,     1000, { name: 'skip', } )\n  # debug s ( ISL.aggregate r,    10000, { name: 'skip', } )\n  # debug s ( ISL.aggregate r,   100000, { name: 'skip', } )\n  # debug s ( ISL.aggregate r,  1000000, { name: 'skip', } )\n  # debug s ( ISL.aggregate r, Infinity, { name: 'skip', } )\n  T.eq ( ISL.aggregate r,        1, { name: 'skip', } ), {\"tag\":[\"all\",\"finite\",\"truly-huge\",\"huge\",\"big\",\"sizable\",\"small\",\"tiny\"]}\n  T.eq ( ISL.aggregate r,       10, { name: 'skip', } ), {\"tag\":[\"all\",\"finite\",\"truly-huge\",\"huge\",\"big\",\"sizable\",\"small\"]}\n  T.eq ( ISL.aggregate r,      100, { name: 'skip', } ), {\"tag\":[\"all\",\"finite\",\"truly-huge\",\"huge\",\"big\",\"sizable\"]}\n  T.eq ( ISL.aggregate r,     1000, { name: 'skip', } ), {\"tag\":[\"all\",\"finite\",\"truly-huge\",\"huge\",\"big\"]}\n  T.eq ( ISL.aggregate r,    10000, { name: 'skip', } ), {\"tag\":[\"all\",\"finite\",\"truly-huge\",\"huge\"]}\n  T.eq ( ISL.aggregate r,   100000, { name: 'skip', } ), {\"tag\":[\"all\",\"finite\",\"truly-huge\"]}\n  T.eq ( ISL.aggregate r,  1000000, { name: 'skip', } ), {\"tag\":[\"all\",\"finite\"]}\n  T.eq ( ISL.aggregate r, Infinity, { name: 'skip', } ), { tag: [ 'all', ], }\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"(v2) match, intersect\" ] = ( T ) ->\n  ascii = ISL.new()\n  ISL.add ascii, { lo: 0x00, hi: 0x7f, name: 'basic-latin', tag: 'basic-latin',   }\n  ISL.add ascii, { lo: 'a',  hi: 'z',  name: 'letter',      tag: 'letter',        }\n  ISL.add ascii, { lo: 'A',  hi: 'Z',  name: 'letter',      tag: 'letter',        }\n  ISL.add ascii, { lo: 'a',  hi: 'z',  name: 'lower',       tag: 'lower',         }\n  ISL.add ascii, { lo: 'A',  hi: 'Z',  name: 'upper',       tag: 'upper',         }\n  #.........................................................................................................\n  for chr in 'aeiouAEIOU'\n    ISL.add ascii, { lo: chr, hi: chr, name: 'vowel', tag: 'vowel', }\n  consonants = Array.from 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n  for interval in ISL.intervals_from_points ascii, consonants, { name: 'consonant', tag: 'consonant', }\n    ISL.add ascii, interval\n  digits = Array.from '0123456789'\n  for interval in ISL.intervals_from_points ascii, digits, { name: 'digit', tag: 'digit', }\n    ISL.add ascii, interval\n  #.........................................................................................................\n  show ascii\n  #.........................................................................................................\n  info ISL.match ascii, 'f'\n  info ISL.match ascii, [ 'f', 'F', ]\n  info ISL.match ascii, [ 'f', 'F', ], pick: 'id'\n  info ISL.aggregate ascii, 'f'\n  info ISL.aggregate ascii, 'f', { name: 'list', tag: 'list', id: 'list', }\n  # info ISL.match ascii, [ 'f', 'F', { lo: '0', hi: '9', }, ], pick: 'id'\n  # console.log ISL.find_names_with_all_points ascii, [ 'c'     , ]\n  # console.log ISL.find_names_with_all_points ascii, [ 'C'     , ]\n  # console.log ISL.find_names_with_all_points ascii, [ 'c', 'C', ]\n  # console.log ISL.find_names_with_all_points ascii, [ 'C', 'C', ]\n  # console.log ISL.find_names_with_all_points ascii, [ 'C', 'A', ]\n  # console.log ISL.find_names_with_all_points ascii, [ 'c', 'A', ]\n  # console.log ISL.find_names_with_all_points ascii, [ 'A', 'e', ]\n  # console.log ISL.find_names_with_all_points ascii, [ 'i', 'e', ]\n  # console.log ISL.find_names_with_all_points ascii, [ '2', 'e', ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@dump_api = ( T ) ->\n  debug ( Object.keys ISL ).sort()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"(v2) copy\" ] = ( T ) ->\n  original = ISL.new()\n  ISL.add original, { lo: 0x00, hi: 0x7f, name: 'basic-latin', tag: 'basic-latin',   }\n  ISL.add original, { lo: 'a',  hi: 'z',  name: 'letter',      tag: 'letter',        }\n  ISL.add original, { lo: 'A',  hi: 'Z',  name: 'letter',      tag: 'letter',        }\n  ISL.add original, { lo: 'a',  hi: 'z',  name: 'lower',       tag: 'lower',         }\n  ISL.add original, { lo: 'A',  hi: 'Z',  name: 'upper',       tag: 'upper',         }\n  #.........................................................................................................\n  copy = ISL.copy original\n  # debug '9285', original\n  # urge  '9285', copy\n  #.........................................................................................................\n  for key in [ 'entry-by-ids', 'idx-by-names', 'ids-by-names', 'name-by-ids', 'idx-by-ids', 'ids', ]\n    T.eq original[ key ], copy[ key ]\n    T.ok original[ key ] isnt copy[ key ]\n  #.........................................................................................................\n  for key in [ 'idx', 'min', 'max', 'fmin', 'fmax', ]\n    T.ok original[ key ] is copy[ key ]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"(v2) 53846537846\" ] = ( T ) ->\n  u = ISL.new()\n  ISL.add u, { lo: 'q', hi: 'q', tag: 'assigned', rsg: 'u-latn', }\n  ISL.add u, { lo: '里', hi: '里', tag: 'assigned', rsg: 'u-cjk', }\n  ISL.add u, { lo: '里', hi: '里', tag: 'cjk ideograph', }\n  ISL.add u, { lo: '䊷', hi: '䊷', tag: 'assigned', rsg: 'u-cjk-xa', }\n  ISL.add u, { lo: '䊷', hi: '䊷', tag: 'cjk ideograph', }\n  probes_and_matchers = [\n    [ 'q', { rsg: 'u-latn', tag: [ 'assigned' ],                       }, ]\n    [ '里', { rsg: 'u-cjk', tag: [ 'assigned', 'cjk', 'ideograph' ],    }, ]\n    [ '䊷', { rsg: 'u-cjk-xa', tag: [ 'assigned', 'cjk', 'ideograph' ], }, ]\n    ]\n  reducers  = { fallback: 'skip', fields: { 'tag': 'tag', 'rsg': 'assign', }, }\n  for [ probe, matcher, ] in probes_and_matchers\n    result_A = ISL.aggregate u, probe\n    result_B = ISL.aggregate u, probe, reducers\n    # help '©48966', probe, JSON.stringify result_A\n    # urge '©48966', probe, JSON.stringify result_B\n    T.eq result_A[ 'rsg' ], result_B[ 'rsg' ]\n    T.eq result_A[ 'tag' ], result_B[ 'tag' ]\n    T.eq result_B, matcher\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"(v2) query for fact\" ] = ( T ) ->\n  #.........................................................................................................\n  u = ISL.new()\n  ISL.add_index u, 'rsg'\n  ISL.add_index u, 'tag'\n  ISL.add u, { lo: 'q', hi: 'q', tag: 'assigned', rsg: 'u-latn', }    # 0\n  ISL.add u, { lo: '里', hi: '里', tag: 'assigned', rsg: 'u-cjk', }     # 1\n  ISL.add u, { lo: '里', hi: '里', tag: 'cjk ideograph', }              # 2\n  ISL.add u, { lo: '䊷', hi: '䊷', tag: 'assigned', rsg: 'u-cjk-xa', }  # 3\n  ISL.add u, { lo: '䊷', hi: '䊷', tag: 'cjk ideograph', }              # 4\n  #.........................................................................................................\n  # urge ISL.find_ids u, 'tag', 'cjk'\n  # urge ISL.find_ids u, 'tag', 'assigned'\n  # urge ISL.find_ids u, 'tag', 'foobar'\n  # urge ISL.find_ids u, 'rsg', 'u-latn'\n  # urge JSON.stringify ISL.find_entries u, 'tag', 'cjk'\n  # urge JSON.stringify ISL.find_entries u, 'tag', 'assigned'\n  # urge JSON.stringify ISL.find_entries u, 'tag', 'foobar'\n  # urge JSON.stringify ISL.find_entries u, 'rsg', 'u-latn'\n  #.........................................................................................................\n  T.eq ( ISL.find_ids u, 'tag', 'cjk'           ), [ '+[2]', '+[4]' ]\n  T.eq ( ISL.find_ids u, 'tag', 'assigned'      ), [ '+[0]', '+[1]', '+[3]' ]\n  T.eq ( ISL.find_ids u, 'tag', 'foobar'        ), []\n  T.eq ( ISL.find_ids u, 'rsg', 'u-latn'        ), [ '+[0]' ]\n  T.eq ( ISL.find_entries u, 'tag', 'cjk'       ), [{\"lo\":37324,\"hi\":37324,\"tag\":[\"cjk\",\"ideograph\"],\"idx\":2,\"id\":\"+[2]\",\"name\":\"+\",\"size\":1},{\"lo\":17079,\"hi\":17079,\"tag\":[\"cjk\",\"ideograph\"],\"idx\":4,\"id\":\"+[4]\",\"name\":\"+\",\"size\":1}]\n  T.eq ( ISL.find_entries u, 'tag', 'assigned'  ), [{\"lo\":113,\"hi\":113,\"tag\":[\"assigned\"],\"rsg\":\"u-latn\",\"idx\":0,\"id\":\"+[0]\",\"name\":\"+\",\"size\":1},{\"lo\":37324,\"hi\":37324,\"tag\":[\"assigned\"],\"rsg\":\"u-cjk\",\"idx\":1,\"id\":\"+[1]\",\"name\":\"+\",\"size\":1},{\"lo\":17079,\"hi\":17079,\"tag\":[\"assigned\"],\"rsg\":\"u-cjk-xa\",\"idx\":3,\"id\":\"+[3]\",\"name\":\"+\",\"size\":1}]\n  T.eq ( ISL.find_entries u, 'tag', 'foobar'    ), []\n  T.eq ( ISL.find_entries u, 'rsg', 'u-latn'    ), [{\"lo\":113,\"hi\":113,\"tag\":[\"assigned\"],\"rsg\":\"u-latn\",\"idx\":0,\"id\":\"+[0]\",\"name\":\"+\",\"size\":1}]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"(v2) query for fact works with copied ISL\" ] = ( T ) ->\n  #.........................................................................................................\n  u_1 = ISL.new()\n  ISL.add_index u_1, 'rsg'\n  ISL.add_index u_1, 'tag'\n  ISL.add u_1, { lo: 'q', hi: 'q', tag: 'assigned', rsg: 'u-latn', }    # 0\n  ISL.add u_1, { lo: '里', hi: '里', tag: 'assigned', rsg: 'u-cjk', }     # 1\n  ISL.add u_1, { lo: '里', hi: '里', tag: 'cjk ideograph', }              # 2\n  ISL.add u_1, { lo: '䊷', hi: '䊷', tag: 'assigned', rsg: 'u-cjk-xa', }  # 3\n  ISL.add u_1, { lo: '䊷', hi: '䊷', tag: 'cjk ideograph', }              # 4\n  #.........................................................................................................\n  u_2 = ISL.copy u_1\n  #.........................................................................................................\n  # urge ISL.find_ids u_2, 'tag', 'cjk'\n  # urge ISL.find_ids u_2, 'tag', 'assigned'\n  # urge ISL.find_ids u_2, 'tag', 'foobar'\n  # urge ISL.find_ids u_2, 'rsg', 'u-latn'\n  # urge JSON.stringify ISL.find_entries u_2, 'tag', 'cjk'\n  # urge JSON.stringify ISL.find_entries u_2, 'tag', 'assigned'\n  # urge JSON.stringify ISL.find_entries u_2, 'tag', 'foobar'\n  # urge JSON.stringify ISL.find_entries u_2, 'rsg', 'u-latn'\n  #.........................................................................................................\n  T.eq ( ISL.find_ids u_2, 'tag', 'cjk'           ), [ '+[2]', '+[4]' ]\n  T.eq ( ISL.find_ids u_2, 'tag', 'assigned'      ), [ '+[0]', '+[1]', '+[3]' ]\n  T.eq ( ISL.find_ids u_2, 'tag', 'foobar'        ), []\n  T.eq ( ISL.find_ids u_2, 'rsg', 'u-latn'        ), [ '+[0]' ]\n  T.eq ( ISL.find_entries u_2, 'tag', 'cjk'       ), [{\"lo\":37324,\"hi\":37324,\"tag\":[\"cjk\",\"ideograph\"],\"idx\":2,\"id\":\"+[2]\",\"name\":\"+\",\"size\":1},{\"lo\":17079,\"hi\":17079,\"tag\":[\"cjk\",\"ideograph\"],\"idx\":4,\"id\":\"+[4]\",\"name\":\"+\",\"size\":1}]\n  T.eq ( ISL.find_entries u_2, 'tag', 'assigned'  ), [{\"lo\":113,\"hi\":113,\"tag\":[\"assigned\"],\"rsg\":\"u-latn\",\"idx\":0,\"id\":\"+[0]\",\"name\":\"+\",\"size\":1},{\"lo\":37324,\"hi\":37324,\"tag\":[\"assigned\"],\"rsg\":\"u-cjk\",\"idx\":1,\"id\":\"+[1]\",\"name\":\"+\",\"size\":1},{\"lo\":17079,\"hi\":17079,\"tag\":[\"assigned\"],\"rsg\":\"u-cjk-xa\",\"idx\":3,\"id\":\"+[3]\",\"name\":\"+\",\"size\":1}]\n  T.eq ( ISL.find_entries u_2, 'tag', 'foobar'    ), []\n  T.eq ( ISL.find_entries u_2, 'rsg', 'u-latn'    ), [{\"lo\":113,\"hi\":113,\"tag\":[\"assigned\"],\"rsg\":\"u-latn\",\"idx\":0,\"id\":\"+[0]\",\"name\":\"+\",\"size\":1}]\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"(v2) cannot add index twice\" ] = ( T ) ->\n  #.........................................................................................................\n  u = ISL.new()\n  rsg_index = ISL.add_index u, 'rsg'\n  T.throws \"index for 'rsg' already exists\", => ISL.add_index u, 'rsg'\n  T.throws \"no index for field 'NOSUCHINDEX'\", => ISL.delete_index u, 'NOSUCHINDEX'\n  T.ok rsg_index is ISL.delete_index u, 'rsg'\n  T.eq null, ISL.delete_index u, 'rsg', null\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"(v2) aggregate rejects multiple points\" ] = ( T ) ->\n  u = ISL.new()\n  ISL.add_index u, 'tag'\n  ISL.add_index u, 'rsg'\n  ISL.add u, { lo: 'q',  hi: 'q', tag: 'assigned', rsg: 'u-latn', }\n  ISL.add u, { lo: '里', hi: '里', tag: 'assigned', rsg: 'u-cjk', }\n  T.throws \"need single point, got 2\", => ISL.aggregate u, [ 'q', '里', ]\n  #.........................................................................................................\n  return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"(v2) to_xjson, new_from_xjson\" ] = ( T ) ->\n#   reducers =\n#     fallback: 'skip'\n#     fields:\n#       'tag':    'tag'\n#       'rsg':    'assign'\n#   u_1 = ISL.new()\n#   ISL.add_index u_1, 'tag'\n#   ISL.add_index u_1, 'rsg'\n#   ISL.add u_1, { lo: 'q',  hi: 'q', tag: 'assigned', rsg: 'u-latn', }\n#   ISL.add u_1, { lo: '里', hi: '里', tag: 'assigned', rsg: 'u-cjk', }\n#   ISL.add u_1, { lo: '里', hi: '里', tag: 'cjk ideograph', }\n#   ISL.add u_1, { lo: '䊷', hi: '䊷', tag: 'assigned', rsg: 'u-cjk-xa', foo: 'bar', }\n#   ISL.add u_1, { lo: '䊷', hi: '䊷', tag: 'cjk ideograph', }\n#   u_json_1  = ISL.to_xjson        u_1\n#   u_2       = ISL.new_from_xjson  u_json_1\n#   u_json_2  = ISL.to_xjson        u_2\n#   T.eq u_json_1, u_json_2\n#   T.eq ( ISL.aggregate u_1, '䊷', reducers ), ( ISL.aggregate u_2, '䊷', reducers )\n#   #.........................................................................................................\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"(v2) create custom aggregate\" ] = ( T ) ->\n  u = ISL.new()\n  ISL.add u, { lo: 'q', hi: 'q', count: 0, tagfoo: 'assigned', rsg: 'u-latn', }\n  ISL.add u, { lo: '里', hi: '里', count: 1, tagfoo: 'assigned', rsg: 'u-cjk', }\n  ISL.add u, { lo: '里', hi: '里', count: 2, tagfoo: [ 'cjk', 'ideograph', ], }\n  ISL.add u, { lo: '䊷', hi: '䊷', count: 3, tagfoo: 'assigned', rsg: 'u-cjk-xa', }\n  ISL.add u, { lo: '䊷', hi: '䊷', count: 4, tagfoo: [ 'cjk', 'ideograph', ], }\n  #.........................................................................................................\n  reducers =\n    fallback: 'skip'\n    fields:\n      tagfoo:     'tag'\n      count:      'add'\n  #.........................................................................................................\n  my_aggregate = ISL.aggregate.use u, reducers\n  for probe in Array.from 'q里䊷'\n    # debug '4501', probe, my_aggregate probe\n    T.eq ( result_A = ISL.aggregate u, probe, reducers ), ( result_B = my_aggregate probe )\n    T.ok result_A isnt result_B\n    T.ok result_B is my_aggregate probe\n  #.........................................................................................................\n  my_aggregate = ISL.aggregate.use u, reducers, memoize: no\n  for probe in Array.from 'q里䊷'\n    # debug '4501', probe, my_aggregate probe\n    T.eq ( result_A = ISL.aggregate u, probe, reducers ), ( result_B = my_aggregate probe )\n    T.ok result_A isnt result_B\n    T.ok result_B isnt my_aggregate probe\n  #.........................................................................................................\n  return null\n\n\n\n############################################################################################################\nunless module.parent?\n  test @\n  # test @[ \"readme example 2\" ]\n\n\n\n"
  ]
}