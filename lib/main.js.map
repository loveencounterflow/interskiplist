{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'INTERSKIPLIST'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\nσ_plus_א                  = Symbol.for '+א'\nσ_minus_א                 = Symbol.for '-א'\nσ_misfit                  = Symbol.for 'misfit'\n#...........................................................................................................\n{ mix, }                  = require 'multimix006modern'\n# { mix, }                  = require 'multimix'\ntypes                     = require './types'\n{ isa\n  validate\n  type_of }               = types.export()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@new = ( settings ) ->\n  throw new Error \"settings not supported\" if settings?\n  isl_settings =\n    minIndex: σ_minus_א\n    maxIndex: σ_plus_א\n    compare:  ( a, b ) ->\n      return  0 if a is b and ( a is σ_plus_א or a is σ_minus_א )\n      return +1 if ( a is σ_plus_א  ) or ( b is σ_minus_א )\n      return -1 if ( a is σ_minus_א ) or ( b is σ_plus_א  )\n      return +1 if a > b\n      return -1 if a < b\n      return  0\n  #.........................................................................................................\n  substrate           = new ( require 'interval-skip-list' ) isl_settings\n  substrate.toString  = substrate.inspect = -> \"{ interval-skip-list }\"\n  #.........................................................................................................\n  R =\n    '~isa':           'CND/interskiplist'\n    '%self':          substrate\n    'entry-by-ids':   {}\n    'idx-by-names':   {}\n    'ids-by-names':   {}\n    'name-by-ids':    {}\n    'idx-by-ids':     {}\n    'ids':            []\n    'idx':            -1\n    'min':            null\n    'max':            null\n    'fmin':           null\n    'fmax':           null\n    'indexes':        {}\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@copy = ( me ) ->\n  R = @new()\n  @add_index  R, name                 for name  of me[ 'indexes' ]\n  @add        R, CND.deep_copy entry  for entry in @entries_of me\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@add = ( me, entry ) ->\n  ### TAINT currently we keep the identity of `entry` and amend it; wouldn't it be better to copy? or deep\n  copy? it and then amend it? ###\n  throw new Error \"expected 2 arguments, got #{arity}\" unless ( arity = arguments.length ) is 2\n  throw new Error \"expected a POD, got a #{type_of entry}\" unless isa.object entry\n  { lo, hi, id, name, } = entry\n  throw new Error \"expected setting for 'lo', found none\" unless lo?\n  throw new Error \"expected setting for 'hi', found none\" unless hi?\n  lo                          = as_number lo\n  hi                          = as_number hi\n  name                       ?= '+'\n  group_idx                   = ( me[ 'idx-by-names' ][ name ] = ( me[ 'idx-by-names' ][ name ] ? -1 ) + 1 )\n  global_idx                  = ( me[ 'idx' ] += +1 )\n  id                         ?= \"#{name}[#{group_idx}]\"\n  entry[ 'lo'         ]       = lo\n  entry[ 'hi'         ]       = hi\n  entry[ 'idx'        ]       = global_idx\n  entry[ 'id'         ]       = id\n  entry[ 'name'       ]       = name\n  entry[ 'size'       ]       = hi - lo + 1\n  entry[ 'tag'        ]       = normalize_tag entry[ 'tag' ] if entry[ 'tag' ]?\n  me[ 'min'           ]      ?= lo\n  me[ 'min'           ]       = Math.min me[ 'min' ], lo\n  me[ 'max'           ]      ?= hi\n  me[ 'max'           ]       = Math.max me[ 'max' ], lo\n  if isa.float lo\n    me[ 'fmin'  ]              ?= lo\n    me[ 'fmin'  ]               = Math.min me[ 'fmin' ], lo\n  if isa.float hi\n    me[ 'fmax'  ]              ?= hi\n    me[ 'fmax'  ]               = Math.max me[ 'fmax' ], lo\n  me[ 'name-by-ids'   ][ id ] = name\n  me[ 'idx-by-ids'    ][ id ] = global_idx\n  me[ 'entry-by-ids'  ][ id ] = entry ? null\n  ( me[ 'ids-by-names' ][ name ] ?= [] ).push id\n  me[ '%self' ].insert id, lo, hi\n  me[ 'ids' ].push id\n  #.........................................................................................................\n  @_index_entry me, entry\n  #.........................................................................................................\n  return id\n\n#-----------------------------------------------------------------------------------------------------------\n@delete = ( me, id ) -> me[ '%self' ].remove id\n\n\n# #===========================================================================================================\n# # SERIALIZATION\n# #-----------------------------------------------------------------------------------------------------------\n# @to_xjson = ( me ) ->\n#   R =\n#     'index-keys': ( key   for key       of me[ 'indexes'      ] )\n#     'entries':    ( entry for _, entry  of me[ 'entry-by-ids' ] )\n#   return CND.XJSON.stringify R, null, '  '\n\n# #-----------------------------------------------------------------------------------------------------------\n# @new_from_xjson = ( xjson ) ->\n#   description = CND.XJSON.parse xjson\n#   R           = @new()\n#   @add_index  R, key    for key   in description[ 'index-keys'  ]\n#   @add        R, entry  for entry in description[ 'entries'     ]\n#   return R\n\n\n#===========================================================================================================\n# INDEXING\n#-----------------------------------------------------------------------------------------------------------\n@add_index = ( me, name ) ->\n  throw new Error \"index for #{rpr name} already exists\" if me[ 'indexes' ][ name ]?\n  return me[ 'indexes' ][ name ] = {}\n\n#-----------------------------------------------------------------------------------------------------------\n@delete_index = ( me, name, fallback ) ->\n  fallback  = σ_misfit if fallback is undefined\n  R         = me[ 'indexes' ][ name ] ? fallback\n  throw new Error \"no index for field #{rpr name}\" if R is σ_misfit\n  delete me[ 'indexes' ][ name ]\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@find_ids = ( me, name, value ) ->\n  throw new Error \"no index for field #{rpr name}\" unless ( index = me[ 'indexes' ][ name ] )?\n  return [] unless ( R = index[ value ] )?\n  return Object.assign [], R\n\n#-----------------------------------------------------------------------------------------------------------\n@find_entries = ( me, name, value ) ->\n  R         = @find_ids me, name, value\n  R[ idx ]  = me[ 'entry-by-ids' ][ id ] for id, idx in R\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_index_entry = ( me, entry ) ->\n  { id, } = entry\n  #.........................................................................................................\n  if ( indexes = me[ 'indexes' ] )?\n    for name, value of entry\n      continue unless ( index = indexes[ name ] )\n      ### TAINT this is a minimally viable product; indexing behavior should be configurable ###\n      if name is 'tag'\n        for tag in normalize_tag value\n          ( index[ tag ] ?= [] ).push id\n      else\n        ( index[ value ] ?= [] ).push id\n  #.........................................................................................................\n  return null\n\n#===========================================================================================================\n# COVER AND INTERSECT\n#-----------------------------------------------------------------------------------------------------------\n@match      = ( me, points, settings = {} ) -> @_match_or_intersect me, 'match',      points, settings\n@intersect  = ( me, points, settings = {} ) -> @_match_or_intersect me, 'intersect',  points, settings\n\n#-----------------------------------------------------------------------------------------------------------\n@_match_or_intersect = ( me, mode, points, settings ) ->\n  # throw new Error \"ISL.match, ISL.intersect on hold for revision\"\n  ### TAINT can probably be greatly simplified since advanced functionality here is not needed ###\n  unless is_subset ( keys = Object.keys settings ), setting_keys_of_cover_and_intersect\n    expected  = setting_keys_of_cover_and_intersect.join ', '\n    got       = keys.join ', '\n    throw new Error \"expected settings out of #{expected}, got #{got}\"\n  { pick, }   = settings\n  if mode is 'match' then R = @_find_ids_with_all_points me, points\n  else                    R = @_find_ids_with_any_points me, points\n  return R if pick is 'id'\n  R = @entries_of me, R\n  if pick?\n    R = ( entry[ pick ] for entry in R )\n    return reduce_tag R if pick is 'tag'\n  return fuse R\n\n#-----------------------------------------------------------------------------------------------------------\nsetting_keys_of_cover_and_intersect = [ 'pick', ]\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@entries_of = ( me, ids = null ) ->\n  unless ids?\n    R = ( entry for _, entry of me[ 'entry-by-ids' ] )\n  else\n    R = []\n    for id in ids\n      throw new Error \"unknown ID #{rpr id}\" unless ( entry = me[ 'entry-by-ids' ][ id ] )?\n      R.push entry\n  return sort_entries_by_insertion_order me, R\n\n#-----------------------------------------------------------------------------------------------------------\n@_find_ids_with_any_points = ( me, points ) ->\n  points = normalize_points points\n  return me[ '%self' ].findContaining points... if points.length < 2\n  R = new Set()\n  for point in points\n    ids = me[ '%self' ].findContaining point\n    R.add id for id in ids\n  return sort_ids_by_insertion_order me, Array.from R\n\n#-----------------------------------------------------------------------------------------------------------\n@_find_ids_with_all_points = ( me, points ) ->\n  points = normalize_points points\n  return me[ '%self' ].findContaining points...\n\n#-----------------------------------------------------------------------------------------------------------\n@intervals_from_points = ( me, points, mixins... ) ->\n  mixin = ( lohi ) ->\n    return lohi unless mixins.length > 0\n    return Object.assign {}, mixins..., lohi\n  points = [ points, ] unless isa.list points\n  points = unique as_numbers points\n  points.sort ( a, b ) ->\n    return +1 if a > b\n    return -1 if a < b\n    return  0\n  R           = []\n  last_point  = null\n  last_lo     = null\n  last_hi     = null\n  for point in points\n    unless last_lo?\n      last_lo     = point\n      last_hi     = point\n      last_point  = point\n      continue\n    if point is last_point + 1\n      last_hi     = point\n      last_point  = point\n      continue\n    R.push ( mixin { lo: last_lo, hi: last_hi, } )\n    last_lo     = point\n    last_hi     = point\n    last_point  = point\n  R.push ( mixin { lo: last_lo, hi: last_hi, } ) if last_lo? and last_hi?\n  return R\n\n\n#===========================================================================================================\n# AGGREGATION\n#-----------------------------------------------------------------------------------------------------------\n@aggregate = ( me, point, reducers = null ) -> ( @aggregate.use me, reducers ) point\n\n#-----------------------------------------------------------------------------------------------------------\n@aggregate.use = ( me, reducers, settings = {} ) =>\n  unless is_subset ( keys = Object.keys settings ), [ 'memoize', ]\n    throw new Error \"unknown keys in #{rpr keys}\"\n  #.........................................................................................................\n  if ( memoize = settings[ 'memoize' ] ? yes ) then cache = {}\n  else                                              cache = null\n  #.........................................................................................................\n  if ( not reducers? ) or ( Object.keys reducers ).length is 0\n    my_mix = @aggregate._mix\n  else\n    ### TAINT this part must be rewritten ###\n    mixins          = [ {}, ]\n    mixins.push @aggregate._reducers\n    mixins.push reducers if reducers?\n    fields                = Object.assign {}, ( mixin.fields for mixin in mixins when mixin.fields? )...\n    reducers              = Object.assign mixins...\n    reducers[ 'fields' ]  = fields\n    my_mix                = mix.use reducers\n  #.........................................................................................................\n  mix_entries_of_point = ( point ) =>\n    point_count = if ( isa.list point ) then point.length else 1\n    throw new Error \"need single point, got #{point_count}\" unless point_count is 1\n    entries = @entries_of me, @_find_ids_with_any_points me, point\n    return my_mix entries...\n  #.........................................................................................................\n  return mix_entries_of_point unless memoize\n  #.........................................................................................................\n  return ( point ) =>\n    return R if ( R = cache[ point ] )?\n    return cache[ point ] = mix_entries_of_point point\n\n#-----------------------------------------------------------------------------------------------------------\n@aggregate._reducers =\n  fields:\n    idx:    'skip'\n    id:     'skip'\n    name:   'skip'\n    lo:     'skip'\n    hi:     'skip'\n    size:   'skip'\n    tag:    'tag'\n\n#-----------------------------------------------------------------------------------------------------------\n@aggregate._mix = mix.use @aggregate._reducers\n\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\nsort_entries_by_insertion_order = ( me, entries ) ->\n  entries.sort ( a, b ) ->\n    return +1 if a[ 'idx' ] > b[ 'idx' ]\n    return -1 if a[ 'idx' ] < b[ 'idx' ]\n    return  0\n  return entries\n\n#-----------------------------------------------------------------------------------------------------------\nsort_ids_by_insertion_order = ( me, ids ) ->\n  idxs = me[ 'idx-by-ids' ]\n  ids.sort ( a, b ) ->\n    return +1 if idxs[ a ] > idxs[ b ]\n    return -1 if idxs[ a ] < idxs[ b ]\n    return  0\n  return ids\n\n#-----------------------------------------------------------------------------------------------------------\nas_number = ( x ) ->\n  return x if x in [ -Infinity, +Infinity, ] or isa.float x\n  unless ( type = type_of x ) is 'text'\n    throw new Error \"expected number or single character text, got a #{type}\"\n  unless ( length = ( Array.from x ).length ) is 1\n    throw new Error \"expected single character text, got one of length #{length}\"\n  return x.codePointAt 0\n\n#-----------------------------------------------------------------------------------------------------------\nas_numbers = ( list ) -> ( as_number x for x in list )\n\n#-----------------------------------------------------------------------------------------------------------\nnormalize_points = ( points ) ->\n  points = [ points, ] unless isa.list points\n  return as_numbers points\n\n#-----------------------------------------------------------------------------------------------------------\nnormalize_tag = ( tag ) ->\n  ### Given a single string or a list of strings, return a new list that contains all whitespace-delimited\n  words in the strings ###\n  return normalize_tag [ tag, ] unless isa.list tag\n  R = []\n  for t in tag\n    continue if t.length is 0\n    R.splice R.length, 0, ( t.split /\\s+/ )...\n  ### TAINT consider to return `unique R` instead ###\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nunique = ( list ) ->\n  ### Return a copy of `list´ that only contains the last occurrence of each value ###\n  ### TAINT consider to modify, not copy `list` ###\n  seen  = new Set()\n  R     = []\n  for idx in [ list.length - 1 .. 0 ] by -1\n    element = list[ idx ]\n    continue if seen.has element\n    seen.add element\n    R.unshift element\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nappend = ( a, b ) ->\n  ### Append elements of list `b` to list `a` ###\n  ### TAINT JS has `[]::concat` ###\n  a.splice a.length, 0, b...\n  return a\n\n#-----------------------------------------------------------------------------------------------------------\nmeld = ( list, value ) ->\n  ### When `value` is a list, `append` it to `list`; else, `push` `value` to `list` ###\n  if isa.list value then  append list, value\n  else                        list.push value\n  return list\n\n#-----------------------------------------------------------------------------------------------------------\nfuse = ( list ) ->\n  ### Flatten `list`, then apply `unique` to it. Does not copy `list` but modifies it ###\n  R = []\n  meld R, element for element in list\n  R = unique R\n  list.splice 0, list.length, R...\n  return list\n\n#-----------------------------------------------------------------------------------------------------------\nreduce_tag = ( raw ) ->\n  source  = fuse raw\n  R       = []\n  exclude = null\n  #.........................................................................................................\n  for idx in [ source.length - 1 .. 0 ] by -1\n    tag = source[ idx ]\n    continue if exclude? and exclude.has tag\n    if tag.startsWith '-'\n      break if tag is '-*'\n      ( exclude ?= new Set() ).add tag[ 1 .. ]\n      continue\n    R.unshift tag\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nis_subset = ( subset, superset ) ->\n  ### `is_subset subset, superset` returns whether `subset` is a subset of `superset`; this is true if each\n  element of `subset` is also an element of `superset`. ###\n  type_of_sub   = type_of subset\n  type_of_super = type_of superset\n  unless type_of_sub is type_of_super\n    throw new Error \"expected two arguments of same type, got #{type_of_sub} and #{type_of_super}\"\n  switch type_of_sub\n    when 'list'\n      return false unless subset.length <= superset.length\n      for element in subset\n        return false unless element in superset\n      return true\n    when 'set'\n      return false unless subset.size <= superset.size\n      iterator = subset.values()\n      loop\n        { value, done, } = iterator.next()\n        return true if done\n        return false unless superset.has value\n      # for element in\n      #   return false unless element in subset\n      return true\n    else\n      throw new Error \"expected lists or sets, got #{type_of_sub} and #{type_of_super}\"\n  return null\n\n\n"
  ]
}