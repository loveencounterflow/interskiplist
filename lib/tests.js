// Generated by CoffeeScript 1.10.0
(function() {
  var CND, ISL, alert, badge, debug, echo, find_ids_text, find_names_text, help, hex, include, info, log, rpr, show, test, urge, warn, whisper,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice;

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = 'INTERSKIPLIST/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  ISL = require('./main');

  this._prune = function() {
    var name, value;
    for (name in this) {
      value = this[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  this._main = function() {
    return test(this, {
      'timeout': 3000
    });
  };

  hex = function(n) {
    return '0x' + n.toString(16);
  };

  find_ids_text = function() {
    var R, me, points;
    me = arguments[0], points = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    R = ISL.find_ids_with_all_points.apply(ISL, [me].concat(slice.call(points)));
    R.sort();
    return R.join(',');
  };

  find_names_text = function() {
    var R, me, points;
    me = arguments[0], points = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    R = ISL.find_names_with_all_points.apply(ISL, [me].concat(slice.call(points)));
    R.sort();
    return R.join(',');
  };

  show = function(me) {
    var hi, hi_closed, id, left, lo, lo_closed, ref, ref1, results, right;
    echo('                      0         1         2         3         4         5         6         7         8         ');
    echo('                      012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789');
    ref = ISL.intervals_of(me);
    results = [];
    for (id in ref) {
      ref1 = ref[id], lo = ref1[0], hi = ref1[1];
      lo_closed = true;
      hi_closed = true;
      if (lo < 0) {
        lo = 0;
        lo_closed = false;
      }
      if (hi > 89) {
        hi = 89;
        hi_closed = false;
      }
      while (id.length < 20) {
        id += ' ';
      }
      if (lo === hi) {
        echo(id + '  ' + (' '.repeat(lo)) + 'H');
        continue;
      }
      left = lo_closed ? '[' : '-';
      right = hi_closed ? ']' : '-';
      results.push(echo(id + '  ' + (' '.repeat(lo)) + left + ('-'.repeat(hi - lo - 1)) + right));
    }
    return results;
  };

  this["test interval tree 1"] = function(T) {
    var hi, i, id, intervals, isl, len, lo, ref;
    isl = ISL["new"]();
    intervals = [[1, 3, 'A'], [2, 14, 'B'], [3, 7, 'C'], [4, 4, 'D'], [5, 7, 'E'], [8, 12, 'F1'], [8, 12, 'F2'], [8, 22, 'G'], [10, 13, 'H']];
    for (i = 0, len = intervals.length; i < len; i++) {
      ref = intervals[i], lo = ref[0], hi = ref[1], id = ref[2];
      ISL.insert(isl, {
        lo: lo,
        hi: hi,
        id: id
      });
    }
    show(isl);
    T.eq(find_ids_text(isl, 0), '');
    T.eq(find_ids_text(isl, 1), 'A');
    T.eq(find_ids_text(isl, 2), 'A,B');
    T.eq(find_ids_text(isl, 3), 'A,B,C');
    T.eq(find_ids_text(isl, 4), 'B,C,D');
    T.eq(find_ids_text(isl, 5), 'B,C,E');
    T.eq(find_ids_text(isl, 6), 'B,C,E');
    T.eq(find_ids_text(isl, 7), 'B,C,E');
    T.eq(find_ids_text(isl, 8), 'B,F1,F2,G');
    T.eq(find_ids_text(isl, 9), 'B,F1,F2,G');
    T.eq(find_ids_text(isl, 10), 'B,F1,F2,G,H');
    T.eq(find_ids_text(isl, 11), 'B,F1,F2,G,H');
    T.eq(find_ids_text(isl, 12), 'B,F1,F2,G,H');
    T.eq(find_ids_text(isl, 13), 'B,G,H');
    T.eq(find_ids_text(isl, 14), 'B,G');
    T.eq(find_ids_text(isl, 15), 'G');
    T.eq(find_ids_text(isl, 16), 'G');
    T.eq(find_ids_text(isl, 17), 'G');
    T.eq(find_ids_text(isl, 18), 'G');
    return null;
  };

  this["test interval tree 2"] = function(T) {
    var hi, i, intervals, isl, len, lo, name, ref;
    isl = ISL["new"]();
    intervals = [[1, 3, 'orion'], [2, 14, 'orion'], [3, 7, 'orion'], [4, 4, 'orion'], [5, 7, 'cygnus'], [5, 7, 'orion'], [8, 12, 'aldebaran'], [-12, 8, 'aldebaran'], [8, 22, 'aldebaran'], [10, 13, 'aldebaran'], [11, 15, 'cygnus']];
    for (i = 0, len = intervals.length; i < len; i++) {
      ref = intervals[i], lo = ref[0], hi = ref[1], name = ref[2];
      ISL.insert(isl, {
        lo: lo,
        hi: hi,
        name: name
      });
    }
    show(isl);
    T.eq(find_names_text(isl, 0), "aldebaran");
    T.eq(find_names_text(isl, 1), "aldebaran,orion");
    T.eq(find_names_text(isl, 2), "aldebaran,orion");
    T.eq(find_names_text(isl, 3), "aldebaran,orion");
    T.eq(find_names_text(isl, 4), "aldebaran,orion");
    T.eq(find_names_text(isl, 5), "aldebaran,cygnus,orion");
    T.eq(find_names_text(isl, 6), "aldebaran,cygnus,orion");
    T.eq(find_names_text(isl, 7), "aldebaran,cygnus,orion");
    T.eq(find_names_text(isl, 8), "aldebaran,orion");
    T.eq(find_names_text(isl, 9), "aldebaran,orion");
    T.eq(find_names_text(isl, 10), "aldebaran,orion");
    T.eq(find_names_text(isl, 11), "aldebaran,cygnus,orion");
    T.eq(find_names_text(isl, 12), "aldebaran,cygnus,orion");
    T.eq(find_names_text(isl, 13), "aldebaran,cygnus,orion");
    T.eq(find_names_text(isl, 14), "aldebaran,cygnus,orion");
    T.eq(find_names_text(isl, 15), "aldebaran,cygnus");
    T.eq(find_names_text(isl, 16), "aldebaran");
    T.eq(find_names_text(isl, 17), "aldebaran");
    T.eq(find_names_text(isl, 18), "aldebaran");
    return null;
  };

  this["test interval tree 3"] = function(T) {
    var error_count, hi, i, intervals, isl, len, lo, name, ref, type, v;
    isl = ISL["new"]();
    intervals = [[17, 19, 'plane', 'A'], [5, 8, 'plane', 'B'], [21, 24, 'block', 'A'], [4, 8, 'block', 'D']];
    for (i = 0, len = intervals.length; i < len; i++) {
      ref = intervals[i], lo = ref[0], hi = ref[1], type = ref[2], name = ref[3];
      ISL.insert(isl, {
        lo: lo,
        hi: hi,
        type: type,
        name: name
      });
    }
    show(isl);
    error_count = 0;
    debug(ISL.find_values_with_any_points(isl, 18, 22));
    debug((function() {
      var j, len1, ref1, results;
      ref1 = ISL.find_values_with_any_points(isl, 18, 22);
      results = [];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        v = ref1[j];
        if (v['type'] === 'block') {
          results.push(v);
        }
      }
      return results;
    })());
    return null;
  };

  this["preview: sort by size and insertion order"] = function(T) {

    /*
    《 0x300a
     */
    var ISLX, _, d, descriptions, f, i, idx, isl, len, ref, type, value;
    descriptions = [
      {
        lo: 0x300a,
        hi: 0x300a,
        name: 'style:glyph-0x300a',
        rsg: 'u-cjk-sym',
        style: {
          raise: -0.2
        }
      }, {
        lo: 0x0,
        hi: 0xffff,
        name: 'plane:Basic Multilingual Plane (BMP)'
      }, {
        lo: 0x2e80,
        hi: 0x33ff,
        name: 'area:CJK Miscellaneous Area'
      }, {
        lo: 0x3000,
        hi: 0x303f,
        name: 'block:CJK Symbols and Punctuation',
        rsg: 'u-cjk-sym',
        is_cjk: true,
        tex: 'cnsymOld'
      }, {
        lo: 0x3000,
        hi: 0x303f,
        name: 'block:CJK Symbols and Punctuation',
        rsg: 'u-cjk-sym',
        is_cjk: true,
        tex: 'cnsymNew'
      }, {
        lo: 0x0,
        hi: 0x10ffff,
        name: 'style:fallback',
        tex: 'mktsRsgFb'
      }
    ];
    ISLX = Object.assign({}, ISL);
    f = function() {
      this.sort_values = function(me, values) {
        values.sort(function(a, b) {
          var a_idx, a_size, b_idx, b_size, ref, ref1;
          ref = [a['size'], b['size']], a_size = ref[0], b_size = ref[1];
          if (a_size > b_size) {
            return -1;
          }
          if (a_size < b_size) {
            return +1;
          }
          ref1 = [a['idx'], b['idx']], a_idx = ref1[0], b_idx = ref1[1];
          if (a_idx > b_idx) {
            return +1;
          }
          if (a_idx < b_idx) {
            return -1;
          }
          return 0;
        });
        return values;
      };
      return this.find_reduced_value = function() {
        var R, i, j, k, len, me, points, settings, v, value, values;
        me = arguments[0], points = 3 <= arguments.length ? slice.call(arguments, 1, i = arguments.length - 1) : (i = 1, []), settings = arguments[i++];
        if (!CND.isa_pod(settings)) {
          points.push(settings);
          settings = {};
        }
        values = this.find_values_with_all_points.apply(this, [me].concat(slice.call(points)));
        this.sort_values(me, values);
        R = {};
        for (j = 0, len = values.length; j < len; j++) {
          value = values[j];
          for (k in value) {
            v = value[k];
            R[k] = v;
          }
        }
        return R;
      };
    };
    f.apply(ISLX);
    isl = ISLX["new"]();
    for (idx = i = 0, len = descriptions.length; i < len; idx = ++i) {
      d = descriptions[idx];
      ref = d['name'].split(':'), type = ref[0], _ = ref[1];
      d['size'] = d['hi'] - d['lo'] + 1;
      d['idx'] = idx;
      ISLX.insert(isl, d);
    }
    value = ISLX.find_reduced_value(isl, '《'.codePointAt(0));
    debug(JSON.stringify(value));
    help(value);
    T.eq(value, {
      "lo": 12298,
      "hi": 12298,
      "name": "style:glyph-0x300a",
      "tex": "cnsymNew",
      "size": 1,
      "idx": 0,
      "id": "style:glyph-0x300a[0]",
      "rsg": "u-cjk-sym",
      "is_cjk": true,
      "style": {
        "raise": -0.2
      }
    });
    return null;
  };

  if (module.parent == null) {
    include = ["test interval tree 1", "test interval tree 2", "test interval tree 3", "preview: sort by size and insertion order"];
    this._main();

    /*
    isl = ISL.new()
    d = isl[ '%self' ]
    ISL.insert isl, id: 'A', lo: 3, hi: 6
    ISL.insert isl, id: 'B', lo: 9, hi: 10
    ISL.insert isl, id: 'C', lo: 5, hi: 10
    ISL.insert isl, id: 'D', lo: 2, hi: 15
    show isl
    debug d.findContaining 5
    debug d.findContaining 5, 6
    debug d.findContaining 5, 6, 7
    debug d.findContaining 5, 6, 7, 12
     * debug d.findIntersecting 5
    debug d.findIntersecting 5, 6
    debug d.findIntersecting 5, 6, 7
    debug d.findIntersecting 5, 6, 7, 12
     */
  }

}).call(this);

//# sourceMappingURL=tests.js.map
